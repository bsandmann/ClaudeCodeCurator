// <auto-generated />
using System;
using ClaudeCodeCurator;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClaudeCodeCurator.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClaudeCodeCurator.Entities.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedOrUpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TaskNumberCounter")
                        .HasColumnType("integer");

                    b.Property<int>("UserStoryNumberCounter")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.ProjectTaskOrderEntity", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.HasIndex("ProjectId", "Position")
                        .IsUnique();

                    b.ToTable("ProjectTaskOrders", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime?>("ApprovedByUserUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedOrUpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FinishedByAiUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Paused")
                        .HasColumnType("boolean");

                    b.Property<string>("PromptBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestedByAiUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserStoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.UserStoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedOrUpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserStoryNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserStories", (string)null);
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.ProjectTaskOrderEntity", b =>
                {
                    b.HasOne("ClaudeCodeCurator.Entities.ProjectEntity", "Project")
                        .WithMany("OrderedTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClaudeCodeCurator.Entities.TaskEntity", "Task")
                        .WithMany("ProjectOrders")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.TaskEntity", b =>
                {
                    b.HasOne("ClaudeCodeCurator.Entities.UserStoryEntity", "UserStory")
                        .WithMany("Tasks")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.UserStoryEntity", b =>
                {
                    b.HasOne("ClaudeCodeCurator.Entities.ProjectEntity", "Project")
                        .WithMany("UserStories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.ProjectEntity", b =>
                {
                    b.Navigation("OrderedTasks");

                    b.Navigation("UserStories");
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.TaskEntity", b =>
                {
                    b.Navigation("ProjectOrders");
                });

            modelBuilder.Entity("ClaudeCodeCurator.Entities.UserStoryEntity", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
