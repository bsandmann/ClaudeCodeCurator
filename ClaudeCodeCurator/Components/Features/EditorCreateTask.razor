@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Commands.CreateTask
@using ClaudeCodeCurator.Commands.SetUserTaskApproval
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject EditorState EditorState

<div class="p-2">
    <h3 class="text-lg font-semibold mb-2">Create New Task</h3>

    @if (EditorState.SelectedUserStory != null)
    {
        <div class="text-sm text-stone-500 mb-2">
            Creating task for User Story #@EditorState.SelectedUserStory.UserStoryNumber: @EditorState.SelectedUserStory.Name
        </div>

        <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm mb-3" />

            <div class="mb-3">
                <label for="name" class="block text-sm font-medium text-stone-700 mb-1">Name</label>
                <InputText id="name" @bind-Value="_model.Name" class="w-full p-2 border rounded-md" placeholder="Enter task name" />
                <ValidationMessage For="@(() => _model.Name)" class="text-red-500 text-sm" />
            </div>

            <div class="mb-3">
                <label for="type" class="block text-sm font-medium text-stone-700 mb-1">Task Type</label>
                <InputSelect id="type" @bind-Value="_model.Type" class="w-full p-2 border rounded-md">
                    <option value="@TaskType.Task">Task</option>
                    <option value="@TaskType.Bug">Bug</option>
                    <option value="@TaskType.Verify">Verify</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="promptBody" class="block text-sm font-medium text-stone-700 mb-1">Description/Prompt</label>
                <InputTextArea id="promptBody" @bind-Value="_model.PromptBody" class="w-full p-2 border rounded-md h-36" 
                               placeholder="Enter task description or prompt" />
                <ValidationMessage For="@(() => _model.PromptBody)" class="text-red-500 text-sm" />
            </div>

            <div class="flex justify-end space-x-2">
                <button type="button" @onclick="Cancel" class="px-3 py-1 border border-stone-300 rounded-md text-stone-700 hover:bg-stone-50 text-sm">
                    Cancel
                </button>
                <button type="submit" class="px-3 py-1 bg-stone-600 text-white rounded-md hover:bg-stone-700 text-sm" disabled="@(_isSubmitting || _isSubmittingAndApproving)">
                    @if (_isSubmitting)
                    {
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span>Create</span>
                    }
                </button>
                <button type="button" @onclick="HandleCreateAndApprove" class="px-3 py-1 bg-lime-600 text-white rounded-md hover:bg-lime-700 text-sm" disabled="@(_isSubmitting || _isSubmittingAndApproving)">
                    @if (_isSubmittingAndApproving)
                    {
                        <span>Processing...</span>
                    }
                    else
                    {
                        <span>Create and Approve</span>
                    }
                </button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-red-500">No user story selected for creating a task.</div>
    }

    @if (_errorMessage != null)
    {
        <div class="mt-3 p-2 bg-red-100 border-l-4 border-red-500 text-red-700" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnTaskCreated { get; set; }

    private class TaskFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(500, ErrorMessage = "Name cannot exceed 500 characters.")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Description/Prompt is required.")]
        public string PromptBody { get; set; } = string.Empty;
        
        public TaskType Type { get; set; } = TaskType.Task;
    }

    private TaskFormModel _model = new();
    private bool _isSubmitting = false;
    private bool _isSubmittingAndApproving = false;
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        if (EditorState.SelectedUserStory == null)
        {
            _errorMessage = "No user story selected for creating a task.";
            return;
        }

        try
        {
            _isSubmitting = true;
            _errorMessage = null;

            var request = new CreateTaskRequest(
                _model.Name,
                _model.PromptBody,
                EditorState.SelectedUserStory.Id,
                _model.Type
            );

            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was created
                await OnTaskCreated.InvokeAsync(true);
                
                // Switch to edit mode for the newly created task
                // We need to reload the data first to get the complete task entity
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to create task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        EditorState.ClearDetailView();
    }
    
    private async Task HandleCreateAndApprove()
    {
        if (EditorState.SelectedUserStory == null)
        {
            _errorMessage = "No user story selected for creating a task.";
            return;
        }
        
        // Simple validation without the custom validator
        if (string.IsNullOrWhiteSpace(_model.Name))
        {
            _errorMessage = "Name is required.";
            return;
        }
        
        if (string.IsNullOrWhiteSpace(_model.PromptBody))
        {
            _errorMessage = "Description/Prompt is required.";
            return;
        }

        try
        {
            _isSubmittingAndApproving = true;
            _errorMessage = null;

            // Step 1: Create the task
            var createRequest = new CreateTaskRequest(
                _model.Name,
                _model.PromptBody,
                EditorState.SelectedUserStory.Id,
                _model.Type
            );

            var createResult = await Mediator.Send(createRequest);

            if (createResult.IsSuccess)
            {
                // Step 2: Approve the newly created task
                var taskId = createResult.Value; // This is already a Guid
                var approveRequest = new SetUserTaskApprovalRequest(taskId, true);
                var approveResult = await Mediator.Send(approveRequest);

                if (approveResult.IsSuccess)
                {
                    // Notify parent component that a task was created and approved
                    await OnTaskCreated.InvokeAsync(true);
                    
                    // Clear the form
                    EditorState.ClearDetailView();
                }
                else
                {
                    _errorMessage = approveResult.Errors.FirstOrDefault()?.Message ?? 
                        "Task was created but could not be approved. Please approve it manually.";
                }
            }
            else
            {
                _errorMessage = createResult.Errors.FirstOrDefault()?.Message ?? "Failed to create task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmittingAndApproving = false;
        }
    }
    
    // No custom validator needed
}