@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ClaudeCodeCurator.Commands.GetProjectByLastUsed
@using ClaudeCodeCurator.Commands.GetApprovedTaskList
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@using MediatR
@inject IMediator Mediator
@inject EditorState EditorState
@implements IDisposable

<div class="h-full border-l border-gray-200 p-4 flex flex-col">
    <h2 class="text-xl font-semibold mb-4">Task Overview</h2>
    
    @if (_loading)
    {
        <div class="flex justify-center items-center h-24">
            <p class="text-gray-500">Loading tasks...</p>
        </div>
    }
    else if (_errorMessage != null)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 mb-2" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
    else if (_tasks != null && _tasks.Count > 0)
    {
        <div class="overflow-y-auto flex-grow">
            <div class="space-y-2">
                @foreach (var task in _tasks)
                {
                    <div class="bg-gray-100 p-2 hover:bg-gray-200 rounded cursor-pointer transition-colors">
                        <div class="flex items-center justify-between">
                            <div class="flex items-center space-x-1 flex-grow overflow-hidden">
                                <span class="text-xs bg-gray-200 rounded px-1 flex-shrink-0">T-@task.TaskNumber</span>
                                <span class="text-xs font-medium truncate">@task.Name</span>
                                <span class="text-xs px-1.5 py-0.5 rounded @GetTaskTypeClass(task.Type) flex-shrink-0">
                                    @task.Type
                                </span>
                            </div>
                            
                            <div class="flex items-center space-x-1 ml-1 flex-shrink-0">
                                @if (task.ApprovedByUserUtc.HasValue)
                                {
                                    <span class="px-0.5 rounded bg-green-100 text-green-800 flex items-center h-5">
                                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pending</span>
                                    </span>
                                }
                                
                                @if (task.RequestedByAiUtc.HasValue && !task.FinishedByAiUtc.HasValue)
                                {
                                    <span class="px-0.5 rounded bg-blue-100 text-blue-800 flex items-center h-5">
                                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">clock_loader_10</span>
                                    </span>
                                }
                                
                                @if (task.FinishedByAiUtc.HasValue)
                                {
                                    <span class="px-0.5 rounded bg-purple-100 text-purple-800 flex items-center h-5">
                                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">task_alt</span>
                                    </span>
                                }
                                
                                @if (task.Paused)
                                {
                                    <span class="px-0.5 rounded bg-yellow-100 text-yellow-800 flex items-center h-5">
                                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pause_circle</span>
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-gray-500 flex justify-center items-center h-24">
            No approved tasks found.
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private string? _errorMessage;
    private List<TaskModel>? _tasks;
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes to detect when a task is approved/declined
        EditorState.StateChanged += OnStateChanged;
        
        await LoadApprovedTasks();
    }
    
    public void Dispose()
    {
        // Unsubscribe from state changes when component is disposed
        EditorState.StateChanged -= OnStateChanged;
    }
    
    private async Task OnStateChanged()
    {
        // When a state change occurs (e.g., task approval/decline), reload the task list
        await LoadApprovedTasks();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadApprovedTasks()
    {
        try
        {
            _loading = true;
            _errorMessage = null;
            
            // First, get the latest project
            var projectResult = await Mediator.Send(new GetProjectByLastUsedRequest());
            
            if (!projectResult.IsSuccess)
            {
                _errorMessage = projectResult.Errors.FirstOrDefault()?.Message 
                    ?? "Failed to load current project.";
                return;
            }
            
            // Use the project ID to get approved tasks
            var tasksResult = await Mediator.Send(new GetApprovedTaskListRequest(projectResult.Value.Id));
            
            if (tasksResult.IsSuccess)
            {
                _tasks = tasksResult.Value;
            }
            else
            {
                _errorMessage = tasksResult.Errors.FirstOrDefault()?.Message 
                    ?? "Failed to load approved tasks.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
    
    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-green-100 text-green-800",
            _ => "bg-blue-100 text-blue-800"
        };
    }
}