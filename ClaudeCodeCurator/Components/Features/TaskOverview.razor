@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ClaudeCodeCurator.Commands.GetApprovedTaskList
@using ClaudeCodeCurator.Commands.MoveTaskInProjectOrder
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@using MediatR
@using ClaudeCodeCurator.Components.Features
@inject IMediator Mediator
@inject EditorState EditorState
@implements IDisposable

<div class="h-full border-l border-stone-200 flex flex-col">
    <TaskOverviewHeader OnRefresh="RefreshTaskList" LastReloaded="_lastReloaded" IsRefreshing="_loading" />
    
    <div class="p-4 flex-grow overflow-hidden flex flex-col">
    @if (_loading)
    {
        <div class="flex justify-center items-center h-24">
            <p class="text-stone-500">Loading tasks...</p>
        </div>
    }
    else if (_errorMessage != null)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 mb-2" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
    else if (Project == null)
    {
        <div class="text-stone-500 flex justify-center items-center h-24">
            No project selected.
        </div>
    }
    else if (_tasks != null && _tasks.Count > 0)
    {
        <div class="overflow-y-auto flex-grow">
            <div class="space-y-2">
                @for (int i = 0; i < _tasks.Count; i++)
                {
                    var task = _tasks[i];
                    bool isFirst = i == 0;
                    bool isLast = i == _tasks.Count - 1;
                    bool isProcessing = task.RequestedByAiUtc.HasValue && !task.FinishedByAiUtc.HasValue;
                    bool isFinished = task.FinishedByAiUtc.HasValue;
                    bool showButtons = !isProcessing && !isFinished;
                    
                    <div class="flex space-x-2">
                        <div class="flex flex-col gap-y-0.5 pt-2">
                            @{
                                // Check if previous task is finished or in progress
                                bool prevTaskIsFinishedOrInProgress = false;
                                if (!isFirst && i > 0)
                                {
                                    var prevTask = _tasks[i - 1];
                                    prevTaskIsFinishedOrInProgress = prevTask.FinishedByAiUtc.HasValue || 
                                                                    (prevTask.RequestedByAiUtc.HasValue && !prevTask.FinishedByAiUtc.HasValue);
                                }
                                
                                bool canMoveUp = showButtons && !isFirst && !prevTaskIsFinishedOrInProgress;
                            }
                            
                            @if (canMoveUp)
                            {
                                <button @onclick="() => MoveTaskUp(task)" 
                                        class="w-6 h-3 rounded-full bg-white hover:bg-stone-100 text-stone-600 border border-stone-300 flex items-center justify-center transition-colors">
                                    <span class="material-symbols-outlined" style="font-size: 12px;">arrow_drop_up</span>
                                </button>
                            }
                            else
                            {
                                <div class="w-6 h-3"></div> <!-- Spacer for alignment -->
                            }
                            
                            @if (showButtons && !isLast)
                            {
                                <button @onclick="() => MoveTaskDown(task)" 
                                        class="w-6 h-3 rounded-full bg-white hover:bg-stone-100 text-stone-600 border border-stone-300 flex items-center justify-center transition-colors">
                                    <span class="material-symbols-outlined" style="font-size: 12px;">arrow_drop_down</span>
                                </button>
                            }
                            else 
                            {
                                <div class="w-6 h-3"></div> <!-- Spacer for alignment -->
                            }
                        </div>
                        <div class="flex-grow">
                            <TaskItem Task="task" OnTaskReset="HandleTaskReset" OnTaskPauseChanged="HandleTaskPauseChanged" />
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="text-stone-500 flex justify-center items-center h-24">
            No approved tasks found.
        </div>
    }
    </div>
</div>

@code {
    [Parameter]
    public ProjectModel? Project { get; set; }
    
    private bool _loading = true;
    private string? _errorMessage;
    private List<TaskModel>? _tasks;
    private DateTime? _lastReloaded;
    
    // Auto-refresh timer
    private System.Threading.Timer? _autoRefreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes to detect when a task is approved/declined
        EditorState.StateChanged += OnStateChanged;
        
        // Set up auto-refresh timer to reload tasks every 10 seconds
        _autoRefreshTimer = new System.Threading.Timer(async _ =>
        {
            await AutoRefreshTasks();
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        
        await LoadApprovedTasks();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Load tasks when project changes
        if (Project != null)
        {
            await LoadApprovedTasks();
        }
    }
    
    public void Dispose()
    {
        // Unsubscribe from state changes when component is disposed
        EditorState.StateChanged -= OnStateChanged;
        
        // Dispose the auto-refresh timer
        _autoRefreshTimer?.Dispose();
    }
    
    // Method for auto-refreshing tasks on a timer
    private async Task AutoRefreshTasks()
    {
        try
        {
            // Only refresh if we're not already loading and we have a project
            if (!_loading && Project != null)
            {
                await InvokeAsync(async () =>
                {
                    // Update the timestamp even if no data changes
                    // This helps users know data is being refreshed even if nothing changes
                    _lastReloaded = DateTime.UtcNow;
                    
                    await LoadApprovedTasks();
                    await InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in auto-refresh: {ex.Message}");
        }
    }
    
    private async Task OnStateChanged()
    {
        // When a state change occurs (e.g., task approval/decline), reload the task list
        await LoadApprovedTasks();
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadApprovedTasks()
    {
        // Don't attempt to load tasks if there's no project
        if (Project == null) 
        {
            _tasks = null;
            _loading = false;
            return;
        }
        
        try
        {
            _loading = true;
            _errorMessage = null;
            
            // Use the project ID to get approved tasks
            var tasksResult = await Mediator.Send(new GetApprovedTaskListRequest(Project.Id));
            
            if (tasksResult.IsSuccess)
            {
                _tasks = tasksResult.Value;
                _lastReloaded = DateTime.UtcNow;
            }
            else
            {
                _errorMessage = tasksResult.Errors.FirstOrDefault()?.Message 
                    ?? "Failed to load approved tasks.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task HandleTaskReset(bool success)
    {
        if (success)
        {
            // Reload the task list when a task is reset
            await LoadApprovedTasks();
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task HandleTaskPauseChanged(bool success)
    {
        if (success)
        {
            // Reload the task list when a task's pause state is changed
            await LoadApprovedTasks();
            await InvokeAsync(StateHasChanged);
        }
    }
    
    /// <summary>
    /// Method called when user clicks the refresh button in the header
    /// </summary>
    private async Task RefreshTaskList()
    {
        // Update the timestamp when manually refreshing
        _lastReloaded = DateTime.UtcNow;
        
        await LoadApprovedTasks();
        await InvokeAsync(StateHasChanged);
    }
    
    // Methods for moving tasks up and down in the list
    private async Task MoveTaskUp(TaskModel task)
    {
        if (Project == null) return;
        
        try
        {
            int taskIndex = _tasks?.IndexOf(task) ?? -1;
            if (taskIndex <= 0 || taskIndex >= (_tasks?.Count ?? 0)) return;
            
            // Get the task before this one to use as a reference
            TaskModel previousTask = _tasks[taskIndex - 1];
            
            // Create a request to move this task before the previous task
            var request = new MoveTaskInProjectOrderRequest(
                Project.Id, 
                task.Id,
                PositionType.BeforeTask,
                previousTask.Id);
                
            var result = await Mediator.Send(request);
            
            if (result.IsSuccess)
            {
                // Reload the task list to show the new order
                await LoadApprovedTasks();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.Error.WriteLine($"Failed to move task up: {result.Errors.FirstOrDefault()?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error moving task up: {ex.Message}");
        }
    }
    
    private async Task MoveTaskDown(TaskModel task)
    {
        if (Project == null) return;
        
        try
        {
            int taskIndex = _tasks?.IndexOf(task) ?? -1;
            if (taskIndex < 0 || taskIndex >= (_tasks?.Count ?? 0) - 1) return;
            
            // Get the task after this one to use as a reference
            TaskModel nextTask = _tasks[taskIndex + 1];
            
            // Create a request to move this task after the next task
            var request = new MoveTaskInProjectOrderRequest(
                Project.Id, 
                task.Id,
                PositionType.AfterTask,
                nextTask.Id);
                
            var result = await Mediator.Send(request);
            
            if (result.IsSuccess)
            {
                // Reload the task list to show the new order
                await LoadApprovedTasks();
                await InvokeAsync(StateHasChanged);
            }
            else
            {
                Console.Error.WriteLine($"Failed to move task down: {result.Errors.FirstOrDefault()?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error moving task down: {ex.Message}");
        }
    }
}