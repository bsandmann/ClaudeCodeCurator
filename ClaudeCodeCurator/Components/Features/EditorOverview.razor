@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ClaudeCodeCurator.Commands.CreateProject
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Common
@using MediatR
@inject IMediator Mediator
@inject EditorState EditorState
@implements IDisposable

<div class="h-full border-r border-stone-200 p-0 flex flex-col">
    @if (_errorMessage != null)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 mb-2" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
    else if (Project != null)
    {
        <div class="flex-grow @(_isDetailVisible ? "h-3/5" : "h-full") overflow-hidden">
            <ClaudeCodeCurator.Components.Features.EditorList Project="@Project" />
        </div>

        @if (_isDetailVisible)
        {
            <div class="flex-grow overflow-hidden mt-2 border-t bg-white border-stone-500" style="height: 40%; min-height: 600px; max-height: 600px;">
                <ClaudeCodeCurator.Components.Features.EditorDetail
                    OnViewRefreshNeeded="HandleRefreshNeeded"
                    OnDetailClosed="HandleDetailClosed" />
            </div>
        }
    }
    else
    {
        <div class="p-10 flex flex-col items-center justify-center">
            <h2 class="text-xl font-semibold text-stone-700 mb-4">No Projects Found</h2>
            <p class="text-stone-600 mb-6">Start by creating a new project to organize your work.</p>
            <button @onclick="CreateNewProject" class="px-4 py-2 bg-stone-600 text-white rounded-md hover:bg-stone-700 flex items-center">
                <span class="material-symbols-outlined mr-2">add</span>
                Create New Project
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public ProjectModel? Project { get; set; }

    private string? _errorMessage;
    private bool _isDetailVisible = false;
    private bool _isCreatingProject = false;

    protected override void OnInitialized()
    {
        // Subscribe to state change events
        EditorState.StateChanged += OnStateChanged;
        
        // Set initial detail visibility based on EditorState
        _isDetailVisible = EditorState.CurrentMode != EditorState.DetailViewMode.None;
    }

    public void Dispose()
    {
        // Unsubscribe from state change events
        EditorState.StateChanged -= OnStateChanged;
    }

    // Define the async callback for state changes
    private async Task OnStateChanged()
    {
        // Update the detail visibility based on the EditorState
        _isDetailVisible = EditorState.CurrentMode != EditorState.DetailViewMode.None;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleRefreshNeeded(bool needsRefresh)
    {
        // Just notify the parent to refresh data if needed
        if (needsRefresh)
        {
            EditorState.NotifyGlobalStateChanged();
        }
    }

    private void HandleDetailClosed()
    {
        _isDetailVisible = false;
        StateHasChanged();
    }

    private async Task CreateNewProject()
    {
        try
        {
            if (_isCreatingProject) return;
            
            _isCreatingProject = true;
            _errorMessage = null;

            // Create a new default project
            var createRequest = new CreateProjectRequest("New Project", null, null);
            var createResult = await Mediator.Send(createRequest);

            if (createResult.IsSuccess)
            {
                // Notify the parent that a global refresh is needed
                EditorState.NotifyGlobalStateChanged();
            }
            else
            {
                _errorMessage = createResult.Errors.FirstOrDefault()?.Message ?? "Failed to create new project.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred while creating a new project: {ex.Message}";
        }
        finally
        {
            _isCreatingProject = false;
        }
    }
}