@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@inject EditorState EditorState
@implements IDisposable

<div class="@(IsSelected ? "bg-gray-200" : "bg-gray-100") p-2 hover:bg-gray-200 rounded-tl-md rounded-bl-md cursor-pointer transition-colors" @onclick="EditTask">
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-1 flex-grow overflow-hidden">
            <span class="text-xs bg-gray-200 rounded px-1 flex-shrink-0">T-@Task.TaskNumber</span>
            <span class="text-xs font-medium truncate">@Task.Name</span>
            <span class="text-xs px-1.5 py-0.5 rounded @GetTaskTypeClass(Task.Type) flex-shrink-0">
                @Task.Type
            </span>
        </div>
        
        <div class="flex items-center space-x-1 ml-1 flex-shrink-0">
            @if (!Task.ApprovedByUserUtc.HasValue)
            {
                <span class="px-0.5 rounded bg-amber-100 text-amber-800 flex items-center h-5">
                    <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">do_not_disturb_on</span>
                </span>
            }
            else
            {
                @if (Task.RequestedByAiUtc.HasValue && !Task.FinishedByAiUtc.HasValue)
                {
                    <span class="px-0.5 rounded bg-blue-100 text-blue-800 flex items-center h-5">
                        <span class="material-symbols-outlined animate-spin @GetClockAnimationClass()" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">@GetClockIcon()</span>
                    </span>
                }
                else if (Task.FinishedByAiUtc.HasValue)
                {
                    <span class="px-0.5 rounded bg-purple-100 text-purple-800 flex items-center h-5">
                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">task_alt</span>
                    </span>
                }
                else
                {
                    <span class="px-0.5 rounded bg-green-100 text-green-800 flex items-center h-5">
                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pending</span>
                    </span>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public TaskModel Task { get; set; } = null!;
    
    [Parameter]
    public UserStoryModel UserStory { get; set; } = null!;
    
    private bool IsSelected => 
        (EditorState.CurrentMode == EditorState.DetailViewMode.EditTask || 
         EditorState.CurrentMode == EditorState.DetailViewMode.ViewTask) &&
        EditorState.SelectedTask?.Id == Task.Id;
    
    private void ViewTask()
    {
        EditorState.ShowViewTask(Task, UserStory);
    }
    
    private void EditTask()
    {
        EditorState.ShowEditTask(Task, UserStory);
    }
    
    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-green-100 text-green-800",
            _ => "bg-blue-100 text-blue-800"
        };
    }
    
    // Animation state
    private int _clockPhase = 0;
    private System.Threading.Timer _clockTimer;
    
    protected override void OnInitialized()
    {
        // Only set up the timer if the task is in a processing state
        if (Task.RequestedByAiUtc.HasValue && !Task.FinishedByAiUtc.HasValue)
        {
            // Set up a timer to change the clock icon every second
            _clockTimer = new System.Threading.Timer(_ =>
            {
                // Update the clock phase (0-3 for the 4 icons)
                _clockPhase = (_clockPhase + 1) % 4;
                
                // Request UI update
                InvokeAsync(StateHasChanged);
            }, null, 0, 1000); // Update every second
        }
    }
    
    public void Dispose()
    {
        // Clean up the timer
        _clockTimer?.Dispose();
    }
    
    private string GetClockIcon()
    {
        return _clockPhase switch
        {
            0 => "clock_loader_10",
            1 => "clock_loader_20",
            2 => "clock_loader_40",
            3 => "clock_loader_60",
            _ => "clock_loader_10" // Default
        };
    }
    
    private string GetClockAnimationClass()
    {
        // This will make the icon change smoothly
        return "duration-1000";
    }
}