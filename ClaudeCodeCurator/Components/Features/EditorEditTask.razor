@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Commands.UpdateTask
@using ClaudeCodeCurator.Commands.RemoveTask
@using ClaudeCodeCurator.Commands.SetUserTaskApproval
@using ClaudeCodeCurator.Commands.SetResetTask
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject EditorState EditorState
@inject HumanizedTimeService TimeService
@implements IDisposable

<div class="p-2">
    @if (EditorState.SelectedTask != null && EditorState.SelectedUserStory != null)
    {
        <div class="flex justify-between items-center mb-3">
            <div class="text-base font-medium text-stone-700">
                Task #@EditorState.SelectedTask.TaskNumber for User Story #@EditorState.SelectedUserStory.UserStoryNumber
            </div>
            <div class="text-sm text-stone-500">
                @GetStatusTimeText()
            </div>
        </div>

        @if (_showDeleteConfirmation)
        {
            <div class="mb-4 p-3 border border-red-300 bg-red-50 rounded-md">
                <p class="font-medium text-red-700 mb-2">Are you sure you want to delete this task?</p>
                <p class="text-sm text-stone-600 mb-3">This action cannot be undone.</p>
                <div class="flex space-x-2">
                    <button @onclick="CancelDelete" class="px-3 py-1 border border-stone-300 rounded-md text-stone-700 hover:bg-stone-50 text-sm">
                        Cancel
                    </button>
                    <button @onclick="ConfirmDelete" class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm" disabled="@_isDeleting">
                        @if (_isDeleting)
                        {
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                </div>
            </div>
        }

        <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm mb-3" />

            <div class="flex mb-3 gap-4">
                <div class="w-[70%]">
                    <label for="name" class="block text-sm font-medium text-stone-700 mb-1">Name</label>
                    <InputText id="name" @bind-Value="_model.Name" class="w-full p-2 border rounded-md" placeholder="Enter task name" />
                    <ValidationMessage For="@(() => _model.Name)" class="text-red-500 text-sm" />
                </div>

                <div class="w-[30%]">
                    <label for="type" class="block text-sm font-medium text-stone-700 mb-1">Task Type</label>
                    <InputSelect id="type" @bind-Value="_model.Type" class="w-full p-2 border rounded-md">
                        <option value="@TaskType.Task">Task</option>
                        <option value="@TaskType.Bug">Bug</option>
                        <option value="@TaskType.Verify">Verify</option>
                    </InputSelect>
                </div>
            </div>

            <div class="mb-3">
                <div class="flex justify-between items-center mb-1">
                    <label for="promptBody" class="block text-sm font-medium text-stone-700">Prompt</label>
                    <div class="flex space-x-2">
                        <div class="flex">
                            <button type="button" 
                                    class="@(_model.UsePrimePrompt ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                                           px-3 py-1 rounded-l-full text-sm font-medium transition-colors duration-200
                                           hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400 border-r border-stone-300"
                                    @onclick="TogglePrimePrompt">
                                Prime
                            </button>
                            
                            <button type="button" 
                                    class="@(_model.UseVerifyPrompt ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                                           px-3 py-1 rounded-r-full text-sm font-medium transition-colors duration-200
                                           hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400"
                                    @onclick="ToggleVerifyPrompt">
                                Verify
                            </button>
                        </div>
                        
                        <button type="button" 
                                class="@(_model.ReferenceUserStory ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                                       px-3 py-1 rounded-full text-sm font-medium transition-colors duration-200
                                       hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400"
                                @onclick="() => _model.ReferenceUserStory = !_model.ReferenceUserStory">
                            Reference UserStory
                        </button>
                    </div>
                </div>
                <InputTextArea id="promptBody" @bind-Value="_model.PromptBody" class="w-full p-2 border rounded-md h-36 bg-stone-500 text-white font-mono text-sm" 
                               placeholder="Enter task prompt" />
                <ValidationMessage For="@(() => _model.PromptBody)" class="text-red-500 text-sm" />
            </div>
            
            <div class="mb-3 flex justify-between">
                <div class="flex">
                    <button type="button" 
                            class="@(_model.PromptAppendThink ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                                   px-3 py-1 rounded-l-full text-sm font-medium transition-colors duration-200
                                   hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400 border-r border-stone-300"
                            @onclick="ToggleThink">
                        Append "Think"
                    </button>
                    
                    <button type="button" 
                            class="@(_model.PromptAppendThinkHard ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                                   px-3 py-1 rounded-r-full text-sm font-medium transition-colors duration-200
                                   hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400"
                            @onclick="ToggleThinkHard">
                        Append "Think Hard"
                    </button>
                </div>
                
                
                <button type="button" 
                        class="@(_model.PromptAppendDoNotChange ? "bg-stone-500 text-white" : "bg-stone-100 text-stone-700") 
                               px-3 py-1 rounded-full text-sm font-medium transition-colors duration-200
                               hover:bg-stone-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-stone-400"
                        @onclick="() => _model.PromptAppendDoNotChange = !_model.PromptAppendDoNotChange">
                    Append "Do Not Change"
                </button>
            </div>

            <div class="flex justify-between">
                <button type="button" @onclick="ShowDeleteConfirmation" class="px-3 py-1 border border-red-300 text-red-700 rounded-md hover:bg-red-50 text-sm">
                    <span class="material-symbols-outlined text-sm">delete</span> Delete
                </button>
                <div class="flex space-x-2">
                    <button type="button" @onclick="Cancel" class="px-3 py-1 border border-stone-300 rounded-md text-stone-700 hover:bg-stone-50 text-sm">
                        Cancel
                    </button>
                    <button type="submit" class="px-3 py-1 bg-stone-600 text-white rounded-md hover:bg-stone-700 text-sm" disabled="@_isSubmitting">
                        @if (_isSubmitting)
                        {
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save</span>
                        }
                    </button>
                    @if (IsTaskApproved)
                    {
                        @if (IsAiTask)
                        {
                            <button type="button" @onclick="ResetAiTask" class="px-3 py-1 bg-amber-500 hover:bg-amber-600 text-white rounded-md text-sm" disabled="@(_isTogglingApproval || _isSubmitting)">
                                @if (_isTogglingApproval)
                                {
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <span>Reset</span>
                                }
                            </button>
                        }
                        else
                        {
                            <button type="button" @onclick="ToggleApprovalStatus" class="px-3 py-1 bg-amber-500 hover:bg-amber-600 text-white rounded-md text-sm" disabled="@(_isTogglingApproval || _isSubmitting)">
                                @if (_isTogglingApproval)
                                {
                                    <span>Processing...</span>
                                }
                                else
                                {
                                    <span>Decline</span>
                                }
                            </button>
                        }
                    }
                    else
                    {
                        <button type="button" @onclick="SaveAndApprove" class="px-3 py-1 bg-lime-600 hover:bg-lime-700 text-white rounded-md text-sm" disabled="@(_isTogglingApproval || _isSubmitting)">
                            @if (_isTogglingApproval)
                            {
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Save and Approve</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-red-500">No task selected for editing.</div>
    }

    @if (_errorMessage != null)
    {
        <div class="mt-3 p-2 bg-red-100 border-l-4 border-red-500 text-red-700" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnTaskUpdated { get; set; }

    private class TaskFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(500, ErrorMessage = "Name cannot exceed 500 characters.")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Prompt is required.")]
        public string PromptBody { get; set; } = string.Empty;
        
        public TaskType Type { get; set; } = TaskType.Task;
        
        public bool ReferenceUserStory { get; set; } = false;
        public bool PromptAppendThink { get; set; } = false;
        public bool PromptAppendThinkHard { get; set; } = false;
        public bool PromptAppendDoNotChange { get; set; } = false;
        public bool UsePrimePrompt { get; set; } = false;
        public bool UseVerifyPrompt { get; set; } = false;
    }

    private TaskFormModel _model = new();
    private bool _isSubmitting = false;
    private bool _isDeleting = false;
    private bool _isTogglingApproval = false;
    private bool _showDeleteConfirmation = false;
    private string? _errorMessage;
    
    private bool IsTaskApproved => EditorState.SelectedTask?.ApprovedByUserUtc != null;
    
    private bool IsAiTask => EditorState.SelectedTask?.RequestedByAiUtc != null || EditorState.SelectedTask?.FinishedByAiUtc != null;
    
    private string GetStatusTimeText()
    {
        if (EditorState.SelectedTask == null)
            return string.Empty;
            
        // Check in priority order: FinishedByAiUtc > RequestedByAiUtc > ApprovedByUserUtc > CreatedOrUpdatedUtc
        if (EditorState.SelectedTask.FinishedByAiUtc.HasValue)
            return $"Finished by AI {TimeService.GetRelativeTimeText(EditorState.SelectedTask.FinishedByAiUtc.Value)}";
        
        if (EditorState.SelectedTask.RequestedByAiUtc.HasValue)
            return $"Requested by AI {TimeService.GetRelativeTimeText(EditorState.SelectedTask.RequestedByAiUtc.Value)}";
        
        if (EditorState.SelectedTask.ApprovedByUserUtc.HasValue)
            return $"Approved {TimeService.GetRelativeTimeText(EditorState.SelectedTask.ApprovedByUserUtc.Value)}";
        
        // Default to the last update time
        return $"Last updated: {TimeService.GetRelativeTimeText(EditorState.SelectedTask.CreatedOrUpdatedUtc)}";
    }

    protected override void OnInitialized()
    {
        // Subscribe to state changes
        EditorState.StateChanged += OnStateChanged;
        
        // Initial form data population
        UpdateFormFromSelectedTask();
    }
    
    public void Dispose()
    {
        EditorState.StateChanged -= OnStateChanged;
    }
    
    private async Task OnStateChanged()
    {
        // When state changes, update form data from the currently selected task
        UpdateFormFromSelectedTask();
        await InvokeAsync(StateHasChanged);
    }
    
    private void UpdateFormFromSelectedTask()
    {
        if (EditorState.SelectedTask != null)
        {
            // Initialize form with the selected task data
            _model.Name = EditorState.SelectedTask.Name;
            _model.PromptBody = EditorState.SelectedTask.PromptBody;
            _model.Type = EditorState.SelectedTask.Type;
            _model.ReferenceUserStory = EditorState.SelectedTask.ReferenceUserStory;
            _model.PromptAppendThink = EditorState.SelectedTask.PromptAppendThink;
            _model.PromptAppendThinkHard = EditorState.SelectedTask.PromptAppendThinkHard;
            _model.PromptAppendDoNotChange = EditorState.SelectedTask.PromptAppendDoNotChange;
            _model.UsePrimePrompt = EditorState.SelectedTask.UsePrimePrompt;
            _model.UseVerifyPrompt = EditorState.SelectedTask.UseVerifyPrompt;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for update.";
            return;
        }

        try
        {
            _isSubmitting = true;
            _errorMessage = null;

            var request = new UpdateTaskRequest(
                EditorState.SelectedTask.Id,
                _model.Name,
                _model.PromptBody,
                _model.Type,
                _model.ReferenceUserStory,
                _model.PromptAppendThink,
                _model.PromptAppendThinkHard,
                _model.PromptAppendDoNotChange,
                _model.UsePrimePrompt,
                _model.UseVerifyPrompt
            );

            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was updated
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to update task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        EditorState.ClearDetailView();
    }
    
    private void ShowDeleteConfirmation()
    {
        _showDeleteConfirmation = true;
    }
    
    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
    }
    
    private async Task ConfirmDelete()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for deletion.";
            return;
        }

        try
        {
            _isDeleting = true;
            _errorMessage = null;

            var request = new RemoveTaskRequest(EditorState.SelectedTask.Id);
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was deleted
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to delete task.";
                _showDeleteConfirmation = false;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _showDeleteConfirmation = false;
        }
        finally
        {
            _isDeleting = false;
        }
    }
    
    private async Task ToggleApprovalStatus()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for approval/decline.";
            return;
        }

        try
        {
            _isTogglingApproval = true;
            _errorMessage = null;

            // The new approval state is the opposite of the current state
            bool newApprovalState = !IsTaskApproved;
            
            var request = new SetUserTaskApprovalRequest(
                EditorState.SelectedTask.Id,
                newApprovalState
            );
            
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was updated
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form - same behavior as Save button
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? 
                    $"Failed to {(newApprovalState ? "approve" : "decline")} task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isTogglingApproval = false;
        }
    }
    
    private async Task SaveAndApprove()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for update and approval.";
            return;
        }
        
        try
        {
            _isTogglingApproval = true;
            _errorMessage = null;
            
            // Step 1: Save the task first
            var updateRequest = new UpdateTaskRequest(
                EditorState.SelectedTask.Id,
                _model.Name,
                _model.PromptBody,
                _model.Type,
                _model.ReferenceUserStory,
                _model.PromptAppendThink,
                _model.PromptAppendThinkHard,
                _model.PromptAppendDoNotChange,
                _model.UsePrimePrompt,
                _model.UseVerifyPrompt
            );
            
            var updateResult = await Mediator.Send(updateRequest);
            
            if (updateResult.IsSuccess)
            {
                // Step 2: Approve the task
                var approveRequest = new SetUserTaskApprovalRequest(
                    EditorState.SelectedTask.Id,
                    true // Always approve, since the button is only shown in unapproved state
                );
                
                var approveResult = await Mediator.Send(approveRequest);
                
                if (approveResult.IsSuccess)
                {
                    // Notify parent component that a task was updated and approved
                    await OnTaskUpdated.InvokeAsync(true);
                    
                    // Clear editor state to close this form
                    EditorState.ClearDetailView();
                }
                else
                {
                    _errorMessage = approveResult.Errors.FirstOrDefault()?.Message ?? 
                        "Task was saved but could not be approved. Please try approving it again.";
                }
            }
            else
            {
                _errorMessage = updateResult.Errors.FirstOrDefault()?.Message ?? "Failed to save task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isTogglingApproval = false;
        }
    }
    
    private void ToggleThink()
    {
        if (_model.PromptAppendThink)
        {
            _model.PromptAppendThink = false;
        }
        else
        {
            _model.PromptAppendThink = true;
            _model.PromptAppendThinkHard = false;
        }
    }
    
    private void ToggleThinkHard()
    {
        if (_model.PromptAppendThinkHard)
        {
            _model.PromptAppendThinkHard = false;
        }
        else
        {
            _model.PromptAppendThinkHard = true;
            _model.PromptAppendThink = false;
        }
    }
    
    private void TogglePrimePrompt()
    {
        if (_model.UsePrimePrompt)
        {
            _model.UsePrimePrompt = false;
        }
        else
        {
            _model.UsePrimePrompt = true;
            _model.UseVerifyPrompt = false;
        }
        StateHasChanged();
    }
    
    private void ToggleVerifyPrompt()
    {
        if (_model.UseVerifyPrompt)
        {
            _model.UseVerifyPrompt = false;
        }
        else
        {
            _model.UseVerifyPrompt = true;
            _model.UsePrimePrompt = false;
        }
        StateHasChanged();
    }
    
    private async Task ResetAiTask()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for reset.";
            return;
        }

        try
        {
            _isTogglingApproval = true;
            _errorMessage = null;

            var request = new SetResetTaskRequest(
                EditorState.SelectedTask.Id,
                null // Let the handler determine the project ID from the UserStory
            );
            
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was updated
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to reset task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isTogglingApproval = false;
        }
    }
}