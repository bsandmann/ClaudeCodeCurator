@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Commands.SetResetTask
@using ClaudeCodeCurator.Commands.SetTaskPause
@using ClaudeCodeCurator.Common
@using MediatR
@inject IMediator Mediator
@inject EditorState EditorState
@inject HumanizedTimeService HumanizedTimeService
@implements IDisposable

<div class="@(Task.Paused ? "bg-stone-300" : "bg-stone-100") p-2 rounded">
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-1 flex-grow overflow-hidden">
            <span class="text-xs bg-stone-200 rounded px-1 flex-shrink-0">US-@Task.UserStoryNumber/T-@Task.TaskNumber</span>
            <span class="text-xs font-medium truncate">@Task.Name</span>
            <span class="text-xs px-1.5 py-0.5 rounded @GetTaskTypeClass(Task.Type) flex-shrink-0">
                @Task.Type
            </span>
        </div>

        <div class="flex items-center space-x-2 ml-1 flex-shrink-0">
            <button @onclick="ResetTask"
                    class="text-xs px-1.5 py-0.5 rounded bg-stone-200 hover:bg-stone-300 text-stone-700 flex items-center space-x-1 transition-colors hover:shadow-sm">
                <span class="material-symbols-outlined" style="font-size: 14px;">keyboard_return</span>
                <span>@(_isResetting ? "Resetting..." : "Send back")</span>
            </button>
            @if (ShowPauseButton)
            {
                <button @onclick="TogglePause"
                    class="text-xs px-1.5 py-0.5 rounded bg-stone-200 hover:bg-stone-300 text-stone-700 flex items-center space-x-1 transition-colors hover:shadow-sm">
                    <span class="material-symbols-outlined" style="font-size: 14px;">@(Task.Paused ? "play_arrow" : "pause")</span>
                    <span>@(_isTogglingPause ? "Processing..." : Task.Paused ? "Continue" : "Pause")</span>
                </button>
            }

            <div class="flex items-center space-x-1">
                @if (Task.Paused)
                {
                    <span class="px-0.5 rounded bg-white text-stone-800 flex items-center h-5">
                        <span class="material-symbols-outlined"
                              style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pause_circle</span>
                    </span>
                }
                else if (!Task.ApprovedByUserUtc.HasValue)
                {
                    <span class="px-0.5 rounded bg-white text-amber-600 flex items-center h-5">
                        <span class="material-symbols-outlined"
                              style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">do_not_disturb_on</span>
                    </span>
                }
                else
                {
                    @if (Task.RequestedByAiUtc.HasValue && !Task.FinishedByAiUtc.HasValue)
                    {
                        <span class="px-0.5 rounded bg-blue-100 text-blue-800 flex items-center h-5 gap-x-1">
                            <span class="material-symbols-outlined animate-spin @GetClockAnimationClass()"
                                  style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">@GetClockIcon()</span>
                            <span class="text-xs">@HumanizedTimeService.GetSecondsElapsed(Task.RequestedByAiUtc)</span>
                        </span>
                    }
                    else if (Task.FinishedByAiUtc.HasValue)
                    {
                        <span class="px-0.5 rounded bg-purple-100 text-purple-800 flex items-center h-5 gap-x-1">
                            <span class="material-symbols-outlined"
                                  style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">task_alt</span>
                            <span class="text-xs">@HumanizedTimeService.GetMinutesElapsed(Task.FinishedByAiUtc)</span>
                        </span>
                    }
                    else
                    {
                        <span class="px-0.5 rounded bg-white text-lime-600 flex items-center h-5">
                            <span class="material-symbols-outlined"
                                  style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pending</span>
                        </span>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public TaskModel Task { get; set; } = null!;

    [Parameter] public EventCallback<bool> OnTaskReset { get; set; }
    
    [Parameter] public EventCallback<bool> OnTaskPauseChanged { get; set; }

    private bool _isResetting = false;
    private bool _isTogglingPause = false;
    
    private bool ShowPauseButton => 
        // Only show the pause button when the task is approved but not in progress by AI or finished by AI
        Task.ApprovedByUserUtc.HasValue && 
        !Task.RequestedByAiUtc.HasValue && 
        !Task.FinishedByAiUtc.HasValue;

    private async Task ResetTask()
    {
        try
        {
            _isResetting = true;
            await InvokeAsync(StateHasChanged);

            var request = new SetResetTaskRequest(Task.Id);
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent that a task was reset
                await OnTaskReset.InvokeAsync(true);

                // just notify that the state has changed
                EditorState.NotifyGlobalStateChanged();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error resetting task: {ex.Message}");
        }
        finally
        {
            _isResetting = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task TogglePause()
    {
        try
        {
            _isTogglingPause = true;
            await InvokeAsync(StateHasChanged);

            // Toggle the pause state to the opposite of the current state
            var request = new SetTaskPauseRequest(Task.Id, !Task.Paused);
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent that a task's pause state changed
                await OnTaskPauseChanged.InvokeAsync(true);
                
                // Don't use global state change as we only want to update TaskOverview
                // EditorState.NotifyGlobalStateChanged();
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error toggling task pause state: {ex.Message}");
        }
        finally
        {
            _isTogglingPause = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-white text-lime-600",
            _ => "bg-blue-100 text-blue-800"
        };
    }
    
    // Animation state
    private int _clockPhase = 0;
    private System.Threading.Timer _clockTimer;
    
    protected override void OnInitialized()
    {
        // Only set up the timer if the task is in a processing state
        if (Task.RequestedByAiUtc.HasValue && !Task.FinishedByAiUtc.HasValue)
        {
            // Set up a timer to change the clock icon every second
            _clockTimer = new System.Threading.Timer(_ =>
            {
                // Update the clock phase (0-3 for the 4 icons)
                _clockPhase = (_clockPhase + 1) % 4;
                
                // Request UI update
                InvokeAsync(StateHasChanged);
            }, null, 0, 1000); // Update every second
        }
    }
    
    public void Dispose()
    {
        // Clean up the timer
        _clockTimer?.Dispose();
    }
    
    private string GetClockIcon()
    {
        return _clockPhase switch
        {
            0 => "clock_loader_10",
            1 => "clock_loader_20",
            2 => "clock_loader_40",
            3 => "clock_loader_60",
            _ => "clock_loader_10" // Default
        };
    }
    
    private string GetClockAnimationClass()
    {
        // This will make the icon change smoothly
        return "duration-1000";
    }
}