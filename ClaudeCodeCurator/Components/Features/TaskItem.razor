@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities

<div class="bg-gray-100 p-2 hover:bg-gray-200 rounded cursor-pointer transition-colors">
    <div class="flex items-center justify-between">
        <div class="flex items-center space-x-1 flex-grow overflow-hidden">
            <span class="text-xs bg-gray-200 rounded px-1 flex-shrink-0">T-@Task.TaskNumber</span>
            <span class="text-xs font-medium truncate">@Task.Name</span>
            <span class="text-xs px-1.5 py-0.5 rounded @GetTaskTypeClass(Task.Type) flex-shrink-0">
                @Task.Type
            </span>
        </div>
        
        <div class="flex items-center space-x-1 ml-1 flex-shrink-0">
            @if (!Task.ApprovedByUserUtc.HasValue)
            {
                <span class="px-0.5 rounded bg-amber-100 text-amber-800 flex items-center h-5">
                    <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">do_not_disturb_on</span>
                </span>
            }
            else
            {
                @if (Task.RequestedByAiUtc.HasValue && !Task.FinishedByAiUtc.HasValue)
                {
                    <span class="px-0.5 rounded bg-blue-100 text-blue-800 flex items-center h-5">
                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">clock_loader_10</span>
                    </span>
                }
                else if (Task.FinishedByAiUtc.HasValue)
                {
                    <span class="px-0.5 rounded bg-purple-100 text-purple-800 flex items-center h-5">
                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">task_alt</span>
                    </span>
                }
                else
                {
                    <span class="px-0.5 rounded bg-green-100 text-green-800 flex items-center h-5">
                        <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pending</span>
                    </span>
                }
            }
            
            @if (Task.Paused)
            {
                <span class="px-0.5 rounded bg-yellow-100 text-yellow-800 flex items-center h-5">
                    <span class="material-symbols-outlined" style="font-size: 18px; transform: scale(1.2); font-variation-settings: 'FILL' 1; line-height: 1;">pause_circle</span>
                </span>
            }
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public TaskModel Task { get; set; } = null!;
    
    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-green-100 text-green-800",
            _ => "bg-blue-100 text-blue-800"
        };
    }
}