@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Commands.CreateUserStory
@using ClaudeCodeCurator.Common
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject EditorState EditorState

<div class="p-2">
    <h3 class="text-lg font-semibold mb-2">Create New User Story</h3>

    <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-red-500 text-sm mb-3" />

        <div class="mb-3">
            <label for="name" class="block text-sm font-medium text-stone-700 mb-1">Name</label>
            <InputText id="name" @bind-Value="_model.Name" class="w-full p-2 border rounded-md" placeholder="Enter user story name" />
            <ValidationMessage For="@(() => _model.Name)" class="text-red-500 text-sm" />
        </div>

        <div class="mb-3">
            <label for="description" class="block text-sm font-medium text-stone-700 mb-1">Description</label>
            <InputTextArea id="description" @bind-Value="_model.Description" class="w-full p-2 border rounded-md h-24" placeholder="Enter user story description (optional)" />
        </div>

        <div class="flex justify-end space-x-2">
            <button type="button" @onclick="Cancel" class="px-3 py-1 border border-stone-300 rounded-md text-stone-700 hover:bg-stone-50 text-sm">
                Cancel
            </button>
            <button type="submit" class="px-3 py-1 bg-stone-600 text-white rounded-md hover:bg-stone-700 text-sm" disabled="@_isSubmitting">
                @if (_isSubmitting)
                {
                    <span>Creating...</span>
                }
                else
                {
                    <span>Create</span>
                }
            </button>
        </div>
    </EditForm>

    @if (_errorMessage != null)
    {
        <div class="mt-3 p-2 bg-red-100 border-l-4 border-red-500 text-red-700" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnUserStoryCreated { get; set; }

    private class UserStoryFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(200, ErrorMessage = "Name cannot exceed 200 characters.")]
        public string Name { get; set; } = string.Empty;
        
        public string? Description { get; set; }
    }

    private UserStoryFormModel _model = new();
    private bool _isSubmitting = false;
    private string? _errorMessage;

    private async Task HandleValidSubmit()
    {
        if (EditorState.SelectedProject == null)
        {
            _errorMessage = "No project selected for creating a user story.";
            return;
        }

        try
        {
            _isSubmitting = true;
            _errorMessage = null;

            var request = new CreateUserStoryRequest(
                _model.Name,
                EditorState.SelectedProject.Id,
                _model.Description
            );

            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a user story was created
                await OnUserStoryCreated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to create user story.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        EditorState.ClearDetailView();
    }
}