@namespace ClaudeCodeCurator.Components.Features
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@inject EditorState EditorState

<div class="mt-4">
    <h4 class="text-sm font-medium text-stone-700 mb-2">Tasks</h4>
    
    @if (UserStory.Tasks.Any())
    {
        <div class="space-y-2">
            @foreach (var task in UserStory.Tasks.OrderBy(t => t.TaskNumber))
            {
                <div class="border border-stone-200 rounded p-2 hover:bg-stone-50 cursor-pointer" 
                     @onclick="() => ViewTask(task)">
                    <div class="flex items-center">
                        <div class="flex-grow">
                            <div class="flex items-center">
                                <span class="text-xs px-1.5 py-0.5 rounded @GetTaskTypeClass(task.Type) mr-2">
                                    @task.Type
                                </span>
                                <span class="text-xs bg-stone-200 rounded px-1 mr-2">T-@task.TaskNumber</span>
                                <h5 class="text-sm font-medium truncate">@task.Name</h5>
                            </div>
                            
                            <div class="text-xs text-stone-400 mt-1">
                                @if (task.ApprovedByUserUtc.HasValue)
                                {
                                    <span class="px-1.5 py-0.5 rounded bg-white text-lime-600 text-xs mr-2">Approved</span>
                                }
                                @if (task.RequestedByAiUtc.HasValue)
                                {
                                    <span class="px-1.5 py-0.5 rounded bg-blue-100 text-blue-800 text-xs mr-2">Requested</span>
                                }
                                @if (task.FinishedByAiUtc.HasValue)
                                {
                                    <span class="px-1.5 py-0.5 rounded bg-purple-100 text-purple-800 text-xs mr-2">Finished</span>
                                }
                                @if (task.Paused)
                                {
                                    <span class="px-1.5 py-0.5 rounded bg-white text-stone-800 text-xs mr-2">Paused</span>
                                }
                            </div>
                        </div>
                        <div>
                            <button class="text-stone-400 hover:text-stone-600" title="Edit task"
                                    @onclick:stopPropagation="true" @onclick="() => EditTask(task)">
                                <span class="material-symbols-outlined text-sm">edit</span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-sm text-stone-500">
            No tasks available for this user story.
        </div>
    }
    
    <div class="mt-3">
        <button @onclick="CreateTask" class="text-sm text-stone-600 hover:text-blue-800 flex items-center">
            <span class="material-symbols-outlined text-sm mr-1">add</span>
            Add Task
        </button>
    </div>
</div>

@code {
    [Parameter]
    public UserStoryModel UserStory { get; set; } = null!;
    
    private void ViewTask(TaskModel task)
    {
        EditorState.ShowViewTask(task, UserStory);
    }
    
    private void EditTask(TaskModel task)
    {
        EditorState.ShowEditTask(task, UserStory);
    }
    
    private void CreateTask()
    {
        EditorState.ShowCreateTask(UserStory);
    }
    
    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-white text-lime-600",
            _ => "bg-blue-100 text-blue-800"
        };
    }
}