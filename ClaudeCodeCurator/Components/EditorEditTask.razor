@namespace ClaudeCodeCurator.Components
@using ClaudeCodeCurator.Commands.UpdateTask
@using ClaudeCodeCurator.Commands.RemoveTask
@using ClaudeCodeCurator.Commands.SetUserTaskApproval
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Entities
@using ClaudeCodeCurator.Common
@using MediatR
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject EditorState EditorState

<div class="p-2">
    <h3 class="text-lg font-semibold mb-2">Edit Task</h3>

    @if (EditorState.SelectedTask != null && EditorState.SelectedUserStory != null)
    {
        <div class="text-sm text-gray-500 mb-2">
            Task #@EditorState.SelectedTask.TaskNumber for User Story #@EditorState.SelectedUserStory.UserStoryNumber
        </div>

        @if (_showDeleteConfirmation)
        {
            <div class="mb-4 p-3 border border-red-300 bg-red-50 rounded-md">
                <p class="font-medium text-red-700 mb-2">Are you sure you want to delete this task?</p>
                <p class="text-sm text-gray-600 mb-3">This action cannot be undone.</p>
                <div class="flex space-x-2">
                    <button @onclick="CancelDelete" class="px-3 py-1 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 text-sm">
                        Cancel
                    </button>
                    <button @onclick="ConfirmDelete" class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm" disabled="@_isDeleting">
                        @if (_isDeleting)
                        {
                            <span>Deleting...</span>
                        }
                        else
                        {
                            <span>Delete</span>
                        }
                    </button>
                </div>
            </div>
        }

        <EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 text-sm mb-3" />

            <div class="mb-3">
                <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
                <InputText id="name" @bind-Value="_model.Name" class="w-full p-2 border rounded-md" placeholder="Enter task name" />
                <ValidationMessage For="@(() => _model.Name)" class="text-red-500 text-sm" />
            </div>

            <div class="mb-3">
                <label for="type" class="block text-sm font-medium text-gray-700 mb-1">Task Type</label>
                <InputSelect id="type" @bind-Value="_model.Type" class="w-full p-2 border rounded-md">
                    <option value="@TaskType.Task">Task</option>
                    <option value="@TaskType.Bug">Bug</option>
                    <option value="@TaskType.Verify">Verify</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="promptBody" class="block text-sm font-medium text-gray-700 mb-1">Description/Prompt</label>
                <InputTextArea id="promptBody" @bind-Value="_model.PromptBody" class="w-full p-2 border rounded-md h-36" 
                               placeholder="Enter task description or prompt" />
                <ValidationMessage For="@(() => _model.PromptBody)" class="text-red-500 text-sm" />
            </div>

            <div class="flex justify-between">
                <button type="button" @onclick="ShowDeleteConfirmation" class="px-3 py-1 border border-red-300 text-red-700 rounded-md hover:bg-red-50 text-sm">
                    <span class="material-symbols-outlined text-sm">delete</span> Delete
                </button>
                <div class="flex space-x-2">
                    <button type="button" @onclick="Cancel" class="px-3 py-1 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50 text-sm">
                        Cancel
                    </button>
                    <button type="submit" class="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm" disabled="@_isSubmitting">
                        @if (_isSubmitting)
                        {
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save</span>
                        }
                    </button>
                    @if (IsTaskApproved)
                    {
                        <button type="button" @onclick="ToggleApprovalStatus" class="px-3 py-1 bg-amber-500 hover:bg-amber-600 text-white rounded-md text-sm" disabled="@(_isTogglingApproval || _isSubmitting)">
                            @if (_isTogglingApproval)
                            {
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Decline</span>
                            }
                        </button>
                    }
                    else
                    {
                        <button type="button" @onclick="SaveAndApprove" class="px-3 py-1 bg-green-600 hover:bg-green-700 text-white rounded-md text-sm" disabled="@(_isTogglingApproval || _isSubmitting)">
                            @if (_isTogglingApproval)
                            {
                                <span>Processing...</span>
                            }
                            else
                            {
                                <span>Save and Approve</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="text-red-500">No task selected for editing.</div>
    }

    @if (_errorMessage != null)
    {
        <div class="mt-3 p-2 bg-red-100 border-l-4 border-red-500 text-red-700" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnTaskUpdated { get; set; }

    private class TaskFormModel
    {
        [Required(ErrorMessage = "Name is required.")]
        [StringLength(500, ErrorMessage = "Name cannot exceed 500 characters.")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Description/Prompt is required.")]
        public string PromptBody { get; set; } = string.Empty;
        
        public TaskType Type { get; set; } = TaskType.Task;
    }

    private TaskFormModel _model = new();
    private bool _isSubmitting = false;
    private bool _isDeleting = false;
    private bool _isTogglingApproval = false;
    private bool _showDeleteConfirmation = false;
    private string? _errorMessage;
    
    private bool IsTaskApproved => EditorState.SelectedTask?.ApprovedByUserUtc != null;

    protected override void OnInitialized()
    {
        if (EditorState.SelectedTask != null)
        {
            // Initialize form with the selected task data
            _model.Name = EditorState.SelectedTask.Name;
            _model.PromptBody = EditorState.SelectedTask.PromptBody;
            _model.Type = EditorState.SelectedTask.Type;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for update.";
            return;
        }

        try
        {
            _isSubmitting = true;
            _errorMessage = null;

            var request = new UpdateTaskRequest(
                EditorState.SelectedTask.Id,
                _model.Name,
                _model.PromptBody,
                _model.Type
            );

            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was updated
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to update task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private void Cancel()
    {
        EditorState.ClearDetailView();
    }
    
    private void ShowDeleteConfirmation()
    {
        _showDeleteConfirmation = true;
    }
    
    private void CancelDelete()
    {
        _showDeleteConfirmation = false;
    }
    
    private async Task ConfirmDelete()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for deletion.";
            return;
        }

        try
        {
            _isDeleting = true;
            _errorMessage = null;

            var request = new RemoveTaskRequest(EditorState.SelectedTask.Id);
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was deleted
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Failed to delete task.";
                _showDeleteConfirmation = false;
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            _showDeleteConfirmation = false;
        }
        finally
        {
            _isDeleting = false;
        }
    }
    
    private async Task ToggleApprovalStatus()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for approval/decline.";
            return;
        }

        try
        {
            _isTogglingApproval = true;
            _errorMessage = null;

            // The new approval state is the opposite of the current state
            bool newApprovalState = !IsTaskApproved;
            
            var request = new SetUserTaskApprovalRequest(
                EditorState.SelectedTask.Id,
                newApprovalState
            );
            
            var result = await Mediator.Send(request);

            if (result.IsSuccess)
            {
                // Notify parent component that a task was updated
                await OnTaskUpdated.InvokeAsync(true);
                
                // Clear editor state to close this form - same behavior as Save button
                EditorState.ClearDetailView();
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? 
                    $"Failed to {(newApprovalState ? "approve" : "decline")} task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isTogglingApproval = false;
        }
    }
    
    private async Task SaveAndApprove()
    {
        if (EditorState.SelectedTask == null)
        {
            _errorMessage = "No task selected for update and approval.";
            return;
        }
        
        try
        {
            _isTogglingApproval = true;
            _errorMessage = null;
            
            // Step 1: Save the task first
            var updateRequest = new UpdateTaskRequest(
                EditorState.SelectedTask.Id,
                _model.Name,
                _model.PromptBody,
                _model.Type
            );
            
            var updateResult = await Mediator.Send(updateRequest);
            
            if (updateResult.IsSuccess)
            {
                // Step 2: Approve the task
                var approveRequest = new SetUserTaskApprovalRequest(
                    EditorState.SelectedTask.Id,
                    true // Always approve, since the button is only shown in unapproved state
                );
                
                var approveResult = await Mediator.Send(approveRequest);
                
                if (approveResult.IsSuccess)
                {
                    // Notify parent component that a task was updated and approved
                    await OnTaskUpdated.InvokeAsync(true);
                    
                    // Clear editor state to close this form
                    EditorState.ClearDetailView();
                }
                else
                {
                    _errorMessage = approveResult.Errors.FirstOrDefault()?.Message ?? 
                        "Task was saved but could not be approved. Please try approving it again.";
                }
            }
            else
            {
                _errorMessage = updateResult.Errors.FirstOrDefault()?.Message ?? "Failed to save task.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isTogglingApproval = false;
        }
    }
}