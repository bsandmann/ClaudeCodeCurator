@namespace ClaudeCodeCurator.Components
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Common
@using ClaudeCodeCurator.Entities
@implements IDisposable
@inject EditorState EditorState

<div class="border border-gray-200 rounded-md">
    @switch (EditorState.CurrentMode)
    {
        case EditorState.DetailViewMode.CreateUserStory:
            <EditorCreateUserStory OnUserStoryCreated="HandleUserStoryCreated" />
            break;
            
        case EditorState.DetailViewMode.EditUserStory:
            <EditorEditUserStory OnUserStoryUpdated="HandleUserStoryUpdated" />
            break;
            
        case EditorState.DetailViewMode.ViewUserStory:
            if (EditorState.SelectedUserStory != null)
            {
                <div class="p-3">
                    <div class="mb-4">
                        <h3 class="text-lg font-semibold mb-1">@EditorState.SelectedUserStory.Name</h3>
                        <div class="text-xs text-gray-500 mb-3">User Story #@EditorState.SelectedUserStory.UserStoryNumber</div>
                        
                        @if (!string.IsNullOrEmpty(EditorState.SelectedUserStory.Description))
                        {
                            <p class="text-sm mb-4">@EditorState.SelectedUserStory.Description</p>
                        }
                        
                        <div class="flex justify-end">
                            <button @onclick="() => EditorState.ShowEditUserStory(EditorState.SelectedUserStory)" 
                                    class="text-sm text-blue-600 hover:text-blue-800">
                                Edit User Story
                            </button>
                        </div>
                    </div>
                    
                    <div class="mt-4 border-t pt-4">
                        <EditorTaskList UserStory="@EditorState.SelectedUserStory" />
                    </div>
                </div>
            }
            break;
            
        case EditorState.DetailViewMode.CreateTask:
            <EditorCreateTask OnTaskCreated="HandleTaskCreated" />
            break;
            
        case EditorState.DetailViewMode.EditTask:
            <EditorEditTask OnTaskUpdated="HandleTaskUpdated" />
            break;
            
        case EditorState.DetailViewMode.ViewTask:
            if (EditorState.SelectedTask != null && EditorState.SelectedUserStory != null)
            {
                <div class="p-3">
                    <h3 class="text-lg font-semibold mb-1">@EditorState.SelectedTask.Name</h3>
                    <div class="flex items-center text-xs text-gray-500 mb-3">
                        <span class="mr-2">Task #@EditorState.SelectedTask.TaskNumber</span>
                        <span class="px-2 py-0.5 rounded-full @GetTaskTypeClass(EditorState.SelectedTask.Type)">
                            @EditorState.SelectedTask.Type
                        </span>
                    </div>
                    
                    <div class="border border-gray-200 rounded-md p-3 bg-gray-50 mb-4">
                        <pre class="text-sm whitespace-pre-wrap">@EditorState.SelectedTask.PromptBody</pre>
                    </div>
                    
                    <div class="flex justify-end">
                        <button @onclick="() => EditorState.ShowEditTask(EditorState.SelectedTask, EditorState.SelectedUserStory)" 
                                class="text-sm text-blue-600 hover:text-blue-800">
                            Edit
                        </button>
                    </div>
                </div>
            }
            break;
            
        default:
            <div class="p-3">
                <h3 class="text-lg font-semibold mb-3">Detail View</h3>
                <p class="text-sm text-gray-500">Select a user story or task to view details.</p>
            </div>
            break;
    }
</div>

@code {
    [Parameter]
    public EventCallback<bool> OnViewRefreshNeeded { get; set; }
    
    protected override void OnInitialized()
    {
        EditorState.StateChanged += StateHasChanged;
    }
    
    public void Dispose()
    {
        EditorState.StateChanged -= StateHasChanged;
    }
    
    private async Task HandleUserStoryCreated(bool success)
    {
        if (success)
        {
            await OnViewRefreshNeeded.InvokeAsync(true);
        }
    }
    
    private async Task HandleUserStoryUpdated(bool success)
    {
        if (success)
        {
            await OnViewRefreshNeeded.InvokeAsync(true);
        }
    }
    
    private async Task HandleTaskCreated(bool success)
    {
        if (success)
        {
            await OnViewRefreshNeeded.InvokeAsync(true);
        }
    }
    
    private async Task HandleTaskUpdated(bool success)
    {
        if (success)
        {
            await OnViewRefreshNeeded.InvokeAsync(true);
        }
    }
    
    private string GetTaskTypeClass(TaskType type)
    {
        return type switch
        {
            TaskType.Bug => "bg-red-100 text-red-800",
            TaskType.Verify => "bg-green-100 text-green-800",
            _ => "bg-blue-100 text-blue-800"
        };
    }
}