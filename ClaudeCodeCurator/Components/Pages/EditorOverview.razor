@page "/editor"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using ClaudeCodeCurator.Commands.GetProjectByLastUsed
@using ClaudeCodeCurator.Models
@using ClaudeCodeCurator.Common
@using MediatR
@inject IMediator Mediator
@inject EditorState EditorState
@implements IDisposable

<div class="h-full border-r border-gray-200 p-4 flex flex-col">
    <div class="flex-grow-0">
        <h2 class="text-xl font-semibold mb-3">Editor Overview</h2>
    </div>
    
    @if (_loading)
    {
        <div class="flex justify-center items-center h-24">
            <p class="text-gray-500">Loading project data...</p>
        </div>
    }
    else if (_errorMessage != null)
    {
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
            <p>@_errorMessage</p>
        </div>
    }
    else if (_project != null)
    {
        <div class="flex-grow @(_isDetailVisible ? "h-3/5" : "h-full") overflow-hidden">
            <ClaudeCodeCurator.Components.EditorList Project="@_project" />
        </div>
        
        @if (_isDetailVisible)
        {
            <div class="flex-grow overflow-hidden mt-3" style="height: 40%; min-height: 600px; max-height: 600px;">
                <ClaudeCodeCurator.Components.EditorDetail 
                    OnViewRefreshNeeded="HandleRefreshNeeded" 
                    OnDetailClosed="HandleDetailClosed" />
            </div>
        }
    }
    else
    {
        <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4" role="alert">
            <p>No projects found. Please create a new project to get started.</p>
        </div>
    }
</div>

@code {
    private bool _loading = true;
    private string? _errorMessage;
    private ProjectModel? _project;
    private bool _isDetailVisible = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state change events
        EditorState.StateChanged += OnStateChanged;
        
        await LoadLatestProject();
    }

    public void Dispose()
    {
        // Unsubscribe from state change events
        EditorState.StateChanged -= OnStateChanged;
    }
    
    // Define the async callback for state changes
    private async Task OnStateChanged()
    {
        // Update the detail visibility based on the EditorState
        _isDetailVisible = EditorState.CurrentMode != EditorState.DetailViewMode.None;
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadLatestProject()
    {
        try
        {
            _loading = true;
            
            var result = await Mediator.Send(new GetProjectByLastUsedRequest());
            
            if (result.IsSuccess)
            {
                _project = result.Value;
                
                // Set initial detail visibility based on EditorState
                _isDetailVisible = EditorState.CurrentMode != EditorState.DetailViewMode.None;
            }
            else
            {
                _errorMessage = result.Errors.FirstOrDefault()?.Message ?? "Unknown error occurred while loading the project.";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load project: {ex.Message}";
        }
        finally
        {
            _loading = false;
        }
    }
    
    private async Task HandleRefreshNeeded(bool needsRefresh)
    {
        if (needsRefresh)
        {
            await LoadLatestProject();
        }
    }
    
    private void HandleDetailClosed()
    {
        _isDetailVisible = false;
        StateHasChanged();
    }
}